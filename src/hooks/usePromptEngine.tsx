
import { useCallback, useRef } from 'react';

export interface PromptTemplate {
  id: string;
  name: string;
  category: 'reasoning' | 'creative' | 'coding' | 'analysis';
  template: string;
  variables: string[];
  examples?: string[];
  metadata?: Record<string, any>;
}

export interface ContextWindow {
  maxTokens: number;
  currentTokens: number;
  priority: Array<{ content: string; priority: number; tokens: number }>;
}

export function usePromptEngine() {
  // Templates base para diferentes tipos de tarefa
  const templates = useRef<Record<string, PromptTemplate>>({
    'chain-of-thought': {
      id: 'chain-of-thought',
      name: 'Chain of Thought Reasoning',
      category: 'reasoning',
      template: `Voc√™ √© um assistente IA especializado em racioc√≠nio estruturado.

TAREFA: {{task}}
CONTEXTO: {{context}}
COMPLEXIDADE: {{complexity}}

Por favor, resolva esta tarefa usando racioc√≠nio passo-a-passo:

1. **An√°lise Inicial**: Identifique os elementos-chave do problema
2. **Decomposi√ß√£o**: Divida em subtarefas menores se necess√°rio  
3. **Racioc√≠nio**: Aplique l√≥gica estruturada para cada etapa
4. **S√≠ntese**: Combine os resultados em uma resposta coerente
5. **Valida√ß√£o**: Verifique a consist√™ncia da solu√ß√£o

Seja claro, preciso e mostre seu racioc√≠nio.`,
      variables: ['task', 'context', 'complexity']
    },

    'creative-thinking': {
      id: 'creative-thinking',
      name: 'Creative Problem Solving',
      category: 'creative',
      template: `Voc√™ √© um especialista em pensamento criativo e inova√ß√£o.

DESAFIO CRIATIVO: {{task}}
CONTEXTO: {{context}}
RESTRI√á√ïES: {{constraints}}

Use as seguintes t√©cnicas de pensamento lateral:

üé® **BRAINSTORMING DIVERGENTE**:
- Gere m√∫ltiplas ideias sem julgamento
- Explore perspectivas n√£o convencionais
- Use analogias e met√°foras

üí° **S√çNTESE CRIATIVA**:
- Combine elementos aparentemente d√≠spares
- Questione premissas b√°sicas
- Inverta o problema

üöÄ **PROTOTIPAGEM MENTAL**:
- Visualize solu√ß√µes inovadoras
- Teste mentalmente diferentes abordagens
- Itere rapidamente entre ideias

Seja imaginativo, ousado e ofere√ßa m√∫ltiplas alternativas.`,
      variables: ['task', 'context', 'constraints']
    },

    'code-analysis': {
      id: 'code-analysis',
      name: 'Technical Code Analysis',
      category: 'coding',
      template: `Voc√™ √© um arquiteto de software s√™nior especializado em an√°lise t√©cnica.

C√ìDIGO/PROBLEMA T√âCNICO: {{task}}
STACK: {{tech_stack}}
CONTEXTO: {{context}}

Realize uma an√°lise t√©cnica completa:

üîç **AN√ÅLISE ESTRUTURAL**:
- Arquitetura e design patterns
- Qualidade do c√≥digo e manutenibilidade
- Performance e escalabilidade

‚ö° **OTIMIZA√á√ïES**:
- Identificar gargalos
- Sugerir melhorias de performance
- Refatora√ß√µes recomendadas

üõ°Ô∏è **QUALIDADE E SEGURAN√áA**:
- Vulnerabilidades potenciais
- Best practices n√£o seguidas
- Testing strategy

üìà **PR√ìXIMOS PASSOS**:
- Roadmap de implementa√ß√£o
- Considera√ß√µes de deployment
- Monitoramento e observabilidade

Seja t√©cnico, pr√°tico e forne√ßa exemplos de c√≥digo quando relevante.`,
      variables: ['task', 'tech_stack', 'context']
    },

    'constitutional-ai': {
      id: 'constitutional-ai',
      name: 'Constitutional AI Safety',
      category: 'analysis',
      template: `Voc√™ √© um assistente IA que segue princ√≠pios constitucionais de seguran√ßa.

PRINC√çPIOS FUNDAMENTAIS:
1. Seja √∫til, harmless e honest
2. Respeite a autonomia humana
3. Promova o bem-estar
4. Evite vieses e discrimina√ß√£o
5. Proteja privacidade e dados

TAREFA: {{task}}
CONTEXTO: {{context}}

Antes de responder, considere:
- Esta resposta √© √∫til e constructiva?
- H√° riscos potenciais ou malentendidos?
- Estou respeitando a dignidade humana?
- Minhas informa√ß√µes s√£o precisas e atualizadas?

RESPOSTA RESPONS√ÅVEL:`,
      variables: ['task', 'context']
    }
  });

  // Estimativa de tokens (simplificada)
  const estimateTokens = useCallback((text: string): number => {
    // Estimativa b√°sica: ~4 caracteres por token
    return Math.ceil(text.length / 4);
  }, []);

  // Context window optimizer
  const optimizeContextWindow = useCallback((
    content: Array<{ text: string; priority: number }>,
    maxTokens: number = 8000
  ): string => {
    console.log('üîß Otimizando context window...');

    // Calcular tokens para cada item
    const itemsWithTokens = content.map(item => ({
      ...item,
      tokens: estimateTokens(item.text)
    }));

    // Ordenar por prioridade (maior primeiro)
    itemsWithTokens.sort((a, b) => b.priority - a.priority);

    let totalTokens = 0;
    const selectedItems: typeof itemsWithTokens = [];

    // Selecionar itens at√© atingir o limite
    for (const item of itemsWithTokens) {
      if (totalTokens + item.tokens <= maxTokens) {
        selectedItems.push(item);
        totalTokens += item.tokens;
      } else {
        // Tentar truncar o item se for de alta prioridade
        if (item.priority > 0.8) {
          const remainingTokens = maxTokens - totalTokens;
          const maxChars = remainingTokens * 4;
          
          if (maxChars > 100) { // M√≠nimo vi√°vel
            const truncatedText = item.text.substring(0, maxChars) + '...';
            selectedItems.push({
              ...item,
              text: truncatedText,
              tokens: remainingTokens
            });
            totalTokens = maxTokens;
          }
        }
        break;
      }
    }

    console.log(`‚úÖ Context otimizado: ${totalTokens}/${maxTokens} tokens`);
    return selectedItems.map(item => item.text).join('\n\n');
  }, [estimateTokens]);

  // Smart truncation preservando informa√ß√£o cr√≠tica
  const smartTruncate = useCallback((
    text: string,
    maxTokens: number,
    preserveStart: boolean = true,
    preserveEnd: boolean = true
  ): string => {
    const tokens = estimateTokens(text);
    
    if (tokens <= maxTokens) return text;

    const maxChars = maxTokens * 4;
    
    if (preserveStart && preserveEnd) {
      // Preservar in√≠cio e fim
      const startChars = Math.floor(maxChars * 0.4);
      const endChars = Math.floor(maxChars * 0.4);
      const start = text.substring(0, startChars);
      const end = text.substring(text.length - endChars);
      return `${start}\n\n... [TRUNCADO] ...\n\n${end}`;
    } else if (preserveStart) {
      // Preservar apenas in√≠cio
      return text.substring(0, maxChars) + '... [TRUNCADO]';
    } else {
      // Preservar apenas fim
      return '... [TRUNCADO] ' + text.substring(text.length - maxChars);
    }
  }, [estimateTokens]);

  // Template generator baseado em task type
  const generatePrompt = useCallback((
    templateId: string,
    variables: Record<string, any>,
    contextItems: Array<{ text: string; priority: number }> = [],
    maxTokens: number = 8000
  ): string => {
    const template = templates.current[templateId];
    
    if (!template) {
      console.warn(`‚ö†Ô∏è Template ${templateId} n√£o encontrado, usando padr√£o`);
      return `TAREFA: ${variables.task}\nCONTEXTO: ${variables.context || 'N√£o fornecido'}`;
    }

    // Substituir vari√°veis no template
    let prompt = template.template;
    
    for (const [key, value] of Object.entries(variables)) {
      const placeholder = `{{${key}}}`;
      prompt = prompt.replace(new RegExp(placeholder, 'g'), String(value || 'N√£o especificado'));
    }

    // Adicionar contexto otimizado se fornecido
    if (contextItems.length > 0) {
      const optimizedContext = optimizeContextWindow(contextItems, maxTokens * 0.3); // 30% para contexto
      prompt = prompt.replace('{{context}}', optimizedContext);
    }

    // Verificar se prompt final cabe no context window
    const finalTokens = estimateTokens(prompt);
    if (finalTokens > maxTokens) {
      console.log(`‚ö†Ô∏è Prompt muito longo (${finalTokens} tokens), truncando...`);
      prompt = smartTruncate(prompt, maxTokens);
    }

    console.log(`üìù Prompt gerado: ${estimateTokens(prompt)} tokens`);
    return prompt;
  }, [optimizeContextWindow, smartTruncate, estimateTokens]);

  // Enhance prompt com t√©cnicas avan√ßadas
  const enhancePrompt = useCallback((
    basePrompt: string,
    enhancements: {
      addChainOfThought?: boolean;
      addSelfConsistency?: boolean;
      addReflection?: boolean;
      addConstitutional?: boolean;
    } = {}
  ): string => {
    let enhanced = basePrompt;

    if (enhancements.addChainOfThought) {
      enhanced += `\n\nUse racioc√≠nio passo-a-passo e mostre seu processo de pensamento.`;
    }

    if (enhancements.addSelfConsistency) {
      enhanced += `\n\nVerifique a consist√™ncia de sua resposta e considere perspectivas alternativas.`;
    }

    if (enhancements.addReflection) {
      enhanced += `\n\nAp√≥s sua resposta inicial, reflita: Esta √© a melhor abordagem? H√° algo que eu poderia ter considerado melhor?`;
    }

    if (enhancements.addConstitutional) {
      enhanced += `\n\nAntes de finalizar, garanta que sua resposta √© √∫til, segura, precisa e respeitosa.`;
    }

    return enhanced;
  }, []);

  // Adicionar novo template
  const addTemplate = useCallback((template: PromptTemplate) => {
    templates.current[template.id] = template;
  }, []);

  return {
    // Templates
    templates: templates.current,
    addTemplate,
    
    // Core functions
    generatePrompt,
    enhancePrompt,
    
    // Context optimization
    optimizeContextWindow,
    smartTruncate,
    estimateTokens
  };
}
