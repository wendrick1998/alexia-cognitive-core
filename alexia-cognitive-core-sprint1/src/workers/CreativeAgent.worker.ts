
import { expose } from 'comlink';

interface CreativeTask {
  id: string;
  content: string;
  context: any;
  priority: number;
  complexity: number;
}

interface CreativeResult {
  id: string;
  result: string;
  alternatives: string[];
  novelty: number;
  processingTime: number;
  inspiration: string[];
}

class CreativeAgent {
  private isProcessing = false;

  async processTask(task: CreativeTask): Promise<CreativeResult> {
    this.isProcessing = true;
    const startTime = Date.now();
    
    console.log(`üé® Creative Agent processing task: ${task.id}`);
    
    try {
      const inspiration = this.generateInspiration(task);
      const creativeResult = this.performLateralThinking(task, inspiration);
      const alternatives = this.generateAlternatives(task, creativeResult);
      
      const processingTime = Date.now() - startTime;
      
      return {
        id: task.id,
        result: creativeResult,
        alternatives,
        novelty: this.calculateNovelty(creativeResult),
        processingTime,
        inspiration
      };
    } finally {
      this.isProcessing = false;
    }
  }

  private generateInspiration(task: CreativeTask): string[] {
    const inspirationSources = [
      'Biomim√©tica: Solu√ß√µes encontradas na natureza',
      'Analogias: Transfer√™ncia de conceitos entre dom√≠nios',
      'Invers√£o: Questionamento de premissas b√°sicas',
      'Combina√ß√£o: Fus√£o de elementos aparentemente d√≠spares',
      'Simplifica√ß√£o radical: Redu√ß√£o √† ess√™ncia'
    ];
    
    // Select inspiration based on task complexity
    const count = Math.ceil(task.complexity * inspirationSources.length);
    return inspirationSources.slice(0, count);
  }

  private performLateralThinking(task: CreativeTask, inspiration: string[]): string {
    let creative = `üí° Solu√ß√£o Criativa:\n\n`;
    
    creative += `Abordagem Inovadora:\n`;
    creative += `Inspirado em: ${inspiration[0]}\n\n`;
    
    if (task.content.toLowerCase().includes('problema') || task.content.toLowerCase().includes('challenge')) {
      creative += this.generateProblemSolution(task);
    } else if (task.content.toLowerCase().includes('design') || task.content.toLowerCase().includes('interface')) {
      creative += this.generateDesignSolution(task);
    } else {
      creative += this.generateGeneralSolution(task);
    }
    
    creative += `\nPerspectivas Alternativas:\n`;
    creative += `- Vis√£o do usu√°rio: Como isso impacta a experi√™ncia?\n`;
    creative += `- Vis√£o sist√™mica: Como se integra ao ecossistema?\n`;
    creative += `- Vis√£o futurista: Como evoluir√° ao longo do tempo?\n`;
    
    return creative;
  }

  private generateProblemSolution(task: CreativeTask): string {
    return `Solu√ß√£o Inovadora:
1. Redefinir o problema: Talvez n√£o seja o problema que pensamos
2. Abordagem indireta: Resolver problemas adjacentes primeiro
3. Gamifica√ß√£o: Transformar o desafio em experi√™ncia engajante
4. Crowdsourcing: Aproveitar intelig√™ncia coletiva
5. Tecnologia emergente: Usar ferramentas de pr√≥xima gera√ß√£o`;
  }

  private generateDesignSolution(task: CreativeTask): string {
    return `Design Revolucion√°rio:
1. Interface adaptativa: Evolui com o comportamento do usu√°rio
2. Minimalismo inteligente: Menos √© mais, mas contextualmente
3. Feedback multissensorial: Al√©m do visual e auditivo
4. Personaliza√ß√£o profunda: Cada usu√°rio tem experi√™ncia √∫nica
5. Design emergente: A interface se auto-organiza`;
  }

  private generateGeneralSolution(task: CreativeTask): string {
    return `Abordagem Criativa:
1. Pensamento divergente: Explorar m√∫ltiplas dire√ß√µes
2. S√≠ntese inesperada: Combinar elementos n√£o √≥bvios
3. Prototipagem r√°pida: Testar ideias rapidamente
4. Feedback iterativo: Refinar atrav√©s de ciclos curtos
5. Experimenta√ß√£o controlada: Validar hip√≥teses criativas`;
  }

  private generateAlternatives(task: CreativeTask, mainResult: string): string[] {
    const alternatives = [
      'Vers√£o minimalista: Reduzir √† ess√™ncia funcional',
      'Vers√£o maximalista: Explorar todas as possibilidades',
      'Vers√£o h√≠brida: Combinar melhores elementos',
      'Vers√£o disruptiva: Quebrar paradigmas existentes'
    ];
    
    // Add task-specific alternatives
    if (task.complexity > 0.7) {
      alternatives.push('Vers√£o modular: Implementar em fases');
    }
    
    return alternatives.slice(0, 3);
  }

  private calculateNovelty(result: string): number {
    let novelty = 0.5; // Base novelty
    
    if (result.includes('inovador') || result.includes('revolucion√°rio')) novelty += 0.2;
    if (result.includes('emergente') || result.includes('adaptativo')) novelty += 0.2;
    if (result.includes('disruptiva') || result.includes('paradigma')) novelty += 0.1;
    
    return Math.min(novelty, 1.0);
  }

  getStatus() {
    return {
      type: 'creative',
      isProcessing: this.isProcessing,
      capabilities: ['lateral-thinking', 'innovation', 'design-thinking', 'brainstorming']
    };
  }
}

expose(new CreativeAgent());
