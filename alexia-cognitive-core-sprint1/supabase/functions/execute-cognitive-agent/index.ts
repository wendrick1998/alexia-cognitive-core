
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.8';
import { corsHeaders } from '../_shared/cors.ts';

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

const openaiApiKey = Deno.env.get('OPENAI_API_KEY');

interface AgentExecutionRequest {
  task: any;
  agentName: string;
  llmRoute: any;
  userId: string;
}

async function callOpenAI(messages: any[], model: string = 'gpt-4o-mini', temperature: number = 0.7) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openaiApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model,
      messages,
      temperature,
      max_tokens: 1500
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenAI API error: ${response.statusText}`);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

function getAgentSystemPrompt(agentName: string): string {
  switch (agentName) {
    case 'analytical-agent':
      return `Voc√™ √© o Agente Anal√≠tico, especializado em:
- An√°lise profunda e racioc√≠nio l√≥gico estruturado
- Decomposi√ß√£o de problemas complexos
- An√°lise de requisitos e identifica√ß√£o de depend√™ncias
- Pensamento cr√≠tico e avalia√ß√£o de evid√™ncias

Sua resposta deve ser objetiva, estruturada e baseada em evid√™ncias. 
Foque em identificar padr√µes, rela√ß√µes causais e insights anal√≠ticos.
Sempre forne√ßa reasoning step-by-step quando apropriado.`;

    case 'creative-agent':
      return `Voc√™ √© o Agente Criativo, especializado em:
- Design thinking e user experience
- Gera√ß√£o de ideias inovadoras e brainstorming
- Solu√ß√µes criativas para problemas
- Pensamento lateral e abordagens n√£o-convencionais

Sua resposta deve ser imaginativa, inspiradora e focada em possibilidades.
Explore m√∫ltiplas perspectivas e sugira abordagens criativas.
Use analogias e met√°foras quando √∫til.`;

    case 'technical-agent':
      return `Voc√™ √© o Agente T√©cnico, especializado em:
- Arquitetura de software e melhores pr√°ticas de c√≥digo
- Implementa√ß√£o t√©cnica e debugging
- Otimiza√ß√£o de performance e escalabilidade
- Avalia√ß√£o de tecnologias e ferramentas

Sua resposta deve ser precisa, pr√°tica e tecnicamente s√≥lida.
Foque em implementa√ß√£o, c√≥digo e aspectos t√©cnicos espec√≠ficos.
Forne√ßa exemplos de c√≥digo quando relevante.`;

    case 'integration-agent':
      return `Voc√™ √© o Agente Integrador, especializado em:
- S√≠ntese de informa√ß√µes de m√∫ltiplas fontes
- Identifica√ß√£o de padr√µes e conex√µes entre conceitos
- Gera√ß√£o de insights atrav√©s de integra√ß√£o
- Coordena√ß√£o entre diferentes perspectivas

Sua resposta deve conectar diferentes aspectos do problema.
Foque em como diferentes elementos se relacionam e influenciam.
Identifique pontos de converg√™ncia e sinergias.`;

    default:
      return `Voc√™ √© um assistente cognitivo especializado. Forne√ßa uma resposta √∫til e detalhada.`;
  }
}

async function executeWithAgent(task: any, agentName: string, selectedModel: string): Promise<any> {
  const startTime = Date.now();
  
  console.log(`ü§ñ Executando com ${agentName} usando modelo ${selectedModel}`);
  
  const systemPrompt = getAgentSystemPrompt(agentName);
  
  const userPrompt = `
TAREFA: ${task.content}
TIPO: ${task.type}
PRIORIDADE: ${task.priority}
COMPLEXIDADE: ${task.complexity}

${task.metadata ? `CONTEXTO ADICIONAL: ${JSON.stringify(task.metadata)}` : ''}

Por favor, execute esta tarefa de acordo com sua especializa√ß√£o.
Forne√ßa insights espec√≠ficos e acion√°veis.
Se aplic√°vel, identifique pr√≥ximos passos ou considera√ß√µes importantes.
`;

  try {
    const response = await callOpenAI([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ], selectedModel, 0.7);

    const processingTime = Date.now() - startTime;
    
    // Generate insights based on agent type
    const insights = await generateAgentInsights(response, agentName, task);
    
    // Calculate quality score based on response characteristics
    const qualityScore = calculateQualityScore(response, task, agentName);

    console.log(`‚úÖ ${agentName} conclu√≠do em ${processingTime}ms (Qualidade: ${qualityScore.toFixed(2)})`);

    return {
      result: response,
      processingTime,
      qualityScore,
      insights,
      agentUsed: agentName,
      modelUsed: selectedModel
    };

  } catch (error) {
    console.error(`‚ùå Erro na execu√ß√£o do ${agentName}:`, error);
    throw error;
  }
}

async function generateAgentInsights(response: string, agentName: string, task: any): Promise<string[]> {
  const insights = [];
  
  // Simple insight generation based on agent type and response
  switch (agentName) {
    case 'analytical-agent':
      if (response.includes('an√°lise') || response.includes('padr√£o')) {
        insights.push('Padr√µes anal√≠ticos identificados');
      }
      if (response.includes('depend√™ncia') || response.includes('rela√ß√£o')) {
        insights.push('Depend√™ncias e rela√ß√µes mapeadas');
      }
      break;
      
    case 'creative-agent':
      if (response.includes('inovador') || response.includes('criativ')) {
        insights.push('Abordagens criativas propostas');
      }
      if (response.includes('alternativa') || response.includes('possibilidade')) {
        insights.push('M√∫ltiplas alternativas exploradas');
      }
      break;
      
    case 'technical-agent':
      if (response.includes('implementa√ß√£o') || response.includes('c√≥digo')) {
        insights.push('Aspectos t√©cnicos detalhados');
      }
      if (response.includes('performance') || response.includes('otimiza√ß√£o')) {
        insights.push('Otimiza√ß√µes identificadas');
      }
      break;
      
    case 'integration-agent':
      if (response.includes('conex√£o') || response.includes('integra√ß√£o')) {
        insights.push('Conex√µes integradas');
      }
      if (response.includes('sintetizar') || response.includes('combinar')) {
        insights.push('S√≠ntese de m√∫ltiplas perspectivas');
      }
      break;
  }
  
  return insights;
}

function calculateQualityScore(response: string, task: any, agentName: string): number {
  let score = 0.5; // Base score
  
  // Response length and detail
  if (response.length > 500) score += 0.1;
  if (response.length > 1000) score += 0.1;
  
  // Structured thinking
  if (response.includes('1.') || response.includes('‚Ä¢') || response.includes('-')) score += 0.1;
  
  // Agent-specific quality indicators
  switch (agentName) {
    case 'analytical-agent':
      if (response.includes('an√°lise') || response.includes('conclus√£o')) score += 0.1;
      break;
    case 'creative-agent':
      if (response.includes('ideia') || response.includes('inova√ß√£o')) score += 0.1;
      break;
    case 'technical-agent':
      if (response.includes('implementar') || response.includes('c√≥digo')) score += 0.1;
      break;
    case 'integration-agent':
      if (response.includes('conectar') || response.includes('combinar')) score += 0.1;
      break;
  }
  
  // Task complexity alignment
  if (task.complexity > 0.7 && response.length > 800) score += 0.1;
  
  return Math.min(1.0, score);
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { task, agentName, llmRoute, userId }: AgentExecutionRequest = await req.json();

    if (!task || !agentName || !userId) {
      return new Response(
        JSON.stringify({ error: 'task, agentName and userId are required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const result = await executeWithAgent(task, agentName, llmRoute.selectedModel);

    return new Response(
      JSON.stringify({ success: true, ...result }),
      { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o do agente:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        success: false 
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
